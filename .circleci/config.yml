version: 2.1
orbs:
  cli: circleci/circleci-cli@0.1.9
executors:
  python:
    docker:
      - image: python:3.11.4
        environment:
          DJANGO_SETTINGS_MODULE: projectify.settings.test
          DJANGO_CONFIGURATION: Test
          DATABASE_URL: "postgres://projectify:projectify@localhost:5432/projectify"
  python_and_postgres:
    docker:
      - image: python:3.11.4
        environment:
          DJANGO_SETTINGS_MODULE: projectify.settings.test
          DJANGO_CONFIGURATION: Test
          DATABASE_URL: "postgres://projectify:projectify@localhost:5432/projectify"
      - image: postgres:15.5
        environment:
          POSTGRES_DB: projectify
          POSTGRES_USER: projectify
          POSTGRES_PASSWORD: projectify

commands:
  prepare_test_backend:
    description: Install poetry
    steps:
      - checkout:
          path: ~/projectify
      - restore_cache:
          keys:
            - poetry-cache-v1-{{ checksum "poetry.lock" }}
      - run:
          name: Create venv
          command: python3 -m venv ~/.local/share/poetry
      - run:
          name: Install pip and setuptools
          command: ~/.local/share/poetry/bin/pip install -U pip setuptools
      - run:
          name: Install poetry
          command: ~/.local/share/poetry/bin/pip install poetry
      - run:
          name: Link poetry (XXX hack)
          command: ln -sv ~/.local/share/poetry/bin/poetry /usr/local/bin
      - run:
          name: Install pip packages
          command: poetry install --with test
      - save_cache:
          key: poetry-cache-v1-{{ checksum "poetry.lock" }}
          paths:
            - ~/.local
            - ~/.cache
jobs:
  poetry_check:
    executor: python
    working_directory: ~/projectify/backend
    steps:
      - prepare_test_backend
      - run:
          name: Poetry check
          command: poetry check
      - run:
          name: Create requirements.txt
          command: poetry export --format requirements.txt --output requirements.txt
      - run:
          name: Check if requirements.txt up to date
          command: git diff --exit-code HEAD -- requirements.txt
  lint:
    executor: python
    working_directory: ~/projectify/backend
    steps:
      - prepare_test_backend
      - run:
          name: Run ruff format
          command: poetry run ruff format --check .
      - run:
          name: Run ruff
          command: poetry run ruff .
  mypy:
    executor: python
    working_directory: ~/projectify/backend
    steps:
      - prepare_test_backend
      - run:
          name: Run mypy
          command: poetry run mypy .
  pyright:
    executor: python
    working_directory: ~/projectify/backend
    steps:
      - prepare_test_backend
      - run:
          name: Run pyright
          command: poetry run pyright .
  collectstatic:
    executor: python
    working_directory: ~/projectify/backend
    steps:
      - prepare_test_backend
      - run:
          name: Run collectstatic
          command: poetry run ./manage.py collectstatic --noinput
          environment:
            DJANGO_CONFIGURATION: TestCollectstatic
  tests:
    executor: python_and_postgres
    working_directory: ~/projectify/backend
    parallelism: 8
    steps:
      - prepare_test_backend
      - run:
          name: Create junit folder
          command: mkdir junit
      - cli/install
      - run:
          name: Collect tests
          command: |
            circleci tests glob "*/test/test_*.py" "*/test/*/test_*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
      - run:
          name: Run pytest
          command: poetry run pytest --junitxml=test-results/junit.xml $(cat /tmp/tests-to-run)
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
  seeddb:
    executor: python_and_postgres
    working_directory: ~/projectify/backend
    steps:
      - prepare_test_backend
      - run:
          name: Migrate
          command: poetry run ./manage.py migrate
      - run:
          name: Seed DB
          command: poetry run ./manage.py seeddb --n-users 3 --n-workspaces 1 --n-workspace-boards 1 --n-labels 1 --n-tasks 1

workflows:
  test_all:
    jobs:
      - poetry_check
      - lint
      - mypy
      - pyright
      - tests
      - seeddb
      - collectstatic
