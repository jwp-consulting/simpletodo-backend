from typing import (
    Any,
    Optional,
    Union,
)

from rest_framework import (
    serializers,
)

class empty: ...

class Field:
    def __init__(
        self,
        read_only: bool = False,
        write_only: bool = False,
        allow_null: bool = False,
        required: bool = True,
        source: Optional[str] = None,
    ) -> None: ...

class BooleanField(Field): ...
class CharField(Field): ...
class EmailField(Field): ...
class RegexField(Field): ...
class SlugField(Field): ...
class URLField(Field): ...
class UUIDField(Field): ...
class IPAddressField(Field): ...

class IntegerField(Field):
    def __init__(
        self,
        min_value: Optional[int] = None,
        max_value: Optional[int] = None,
        *args: Any,
        **kwargs: Any,
    ) -> None: ...

class FloatField(Field): ...
class DateTimeField(Field): ...
class DateField(Field): ...
class TimeField(Field): ...
class DurationField(Field): ...

class ChoiceField(Field):
    def __init__(
        self,
        choices: list[Union[str, int]],
        allow_blank: bool = False,
        html_cutoff: Optional[int] = None,
        html_cutoff_text: Optional[str] = None,
        *args: Any,
        **kwargs: Any,
    ) -> None: ...

class MultipleChoiceField(Field): ...
class FilePathField(Field): ...
class FileField(Field): ...
class ImageField(Field): ...

class ListField(Field):
    def __init__(
        self, *, child: Union[Field, serializers.Serializer], **args: Any
    ) -> None: ...

class DictField(Field): ...
class HStoreField(Field): ...
class JSONField(Field): ...
class ReadOnlyField(Field): ...
class HiddenField(Field): ...
class SerializerMethodField(Field): ...
class ModelField(Field): ...
