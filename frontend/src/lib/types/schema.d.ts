/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/corporate/stripe-webhook/": {
        /** @description Construct event type using data coming from stripe. */
        post: operations["corporate_stripe_webhook_create"];
    };
    "/corporate/workspace/{workspace_uuid}/create-billing-portal-session": {
        /** @description Handle POST. */
        post: operations["corporate_workspace_create_billing_portal_session_create"];
    };
    "/corporate/workspace/{workspace_uuid}/create-checkout-session": {
        /** @description Handle POST. */
        post: operations["corporate_workspace_create_checkout_session_create"];
    };
    "/corporate/workspace/{workspace_uuid}/customer": {
        /** @description Handle GET. */
        get: operations["corporate_workspace_customer_retrieve"];
    };
    "/corporate/workspace/{workspace_uuid}/redeem-coupon": {
        /** @description Handle POST. */
        post: operations["corporate_workspace_redeem_coupon_create"];
    };
    "/user/user/change-password": {
        /** @description Handle POST. */
        post: operations["user_user_change_password_create"];
    };
    "/user/user/confirm-email": {
        /** @description Handle POST. */
        post: operations["user_user_confirm_email_create"];
    };
    "/user/user/confirm-password-reset": {
        /** @description Handle POST. */
        post: operations["user_user_confirm_password_reset_create"];
    };
    "/user/user/current-user": {
        /** @description Handle GET. */
        get: operations["user_user_current_user_retrieve"];
        /** @description Update a user. */
        put: operations["user_user_current_user_update"];
    };
    "/user/user/email-address-update/confirm": {
        /** @description Handle POST. */
        post: operations["user_user_email_address_update_confirm_create"];
    };
    "/user/user/email-address-update/request": {
        /** @description Handle POST. */
        post: operations["user_user_email_address_update_request_create"];
    };
    "/user/user/log-in": {
        /** @description Handle POST. */
        post: operations["user_user_log_in_create"];
    };
    "/user/user/log-out": {
        /** @description Handle POST. */
        post: operations["user_user_log_out_create"];
    };
    "/user/user/password-policy": {
        /** @description Return all information about current password policy. */
        get: operations["user_user_password_policy_retrieve"];
    };
    "/user/user/profile-picture/upload": {
        /** @description Handle POST. */
        post: operations["user_user_profile_picture_upload_create"];
    };
    "/user/user/request-password-reset": {
        /** @description Handle POST. */
        post: operations["user_user_request_password_reset_create"];
    };
    "/user/user/sign-up": {
        /** @description Handle POST. */
        post: operations["user_user_sign_up_create"];
    };
    "/workspace/label/": {
        /** @description Create the label. */
        post: operations["workspace_label_create"];
    };
    "/workspace/label/{label_uuid}": {
        /** @description Handle PUT. */
        put: operations["workspace_label_update"];
        /** @description Handle DELETE. */
        delete: operations["workspace_label_destroy"];
    };
    "/workspace/project/": {
        /** @description Create a project. */
        post: operations["workspace_project_create"];
    };
    "/workspace/project/{project_uuid}": {
        /** @description Handle GET. */
        get: operations["workspace_project_retrieve"];
        /** @description Handle PUT. */
        put: operations["workspace_project_update"];
        /** @description Handle DELETE. */
        delete: operations["workspace_project_destroy"];
    };
    "/workspace/project/{project_uuid}/archive": {
        /** @description Process request. */
        post: operations["workspace_project_archive_create"];
    };
    "/workspace/section/": {
        /** @description Create a section. */
        post: operations["workspace_section_create"];
    };
    "/workspace/section/{section_uuid}": {
        /** @description Handle GET. */
        get: operations["workspace_section_retrieve"];
        /** @description Update section. */
        put: operations["workspace_section_update"];
        /** @description Handle DELETE. */
        delete: operations["workspace_section_destroy"];
    };
    "/workspace/section/{section_uuid}/move": {
        /** @description Process request. */
        post: operations["workspace_section_move_create"];
    };
    "/workspace/task/": {
        /** @description Handle POST. */
        post: operations["workspace_task_create"];
    };
    "/workspace/task/{task_uuid}": {
        /** @description Handle GET. */
        get: operations["workspace_task_retrieve"];
        /**
         * @description Override update behavior. Return using different serializer.
         *
         * The idea is that we accept abbreviated nested fields, but return
         * the data whole. (ws board section, sub tasks, labels, etc.)
         */
        put: operations["workspace_task_update"];
        /** @description Delete task. */
        delete: operations["workspace_task_destroy"];
    };
    "/workspace/task/{task_uuid}/move-after-task": {
        /** @description Process the request. */
        post: operations["workspace_task_move_after_task_create"];
    };
    "/workspace/task/{task_uuid}/move-to-section": {
        /** @description Process the request. */
        post: operations["workspace_task_move_to_section_create"];
    };
    "/workspace/team-member/{team_member_uuid}": {
        /** @description Handle GET. */
        get: operations["workspace_team_member_retrieve"];
        /** @description Handle PUT. */
        put: operations["workspace_team_member_update"];
        /** @description Handle DELETE. */
        delete: operations["workspace_team_member_destroy"];
    };
    "/workspace/workspace/": {
        /** @description Create the workspace and add this user. */
        post: operations["workspace_workspace_create"];
    };
    "/workspace/workspace/{workspace_uuid}": {
        /** @description Handle GET. */
        get: operations["workspace_workspace_retrieve"];
        /** @description Handle PUT. */
        put: operations["workspace_workspace_update"];
    };
    "/workspace/workspace/{workspace_uuid}/archived-projects/": {
        /** @description Get queryset. */
        get: operations["workspace_workspace_archived_projects_list"];
    };
    "/workspace/workspace/{workspace_uuid}/invite-team-member": {
        /** @description Handle POST. */
        post: operations["workspace_workspace_invite_team_member_create"];
    };
    "/workspace/workspace/{workspace_uuid}/picture-upload": {
        /** @description Handle POST. */
        post: operations["workspace_workspace_picture_upload_create"];
    };
    "/workspace/workspace/{workspace_uuid}/uninvite-team-member": {
        /** @description Handle POST. */
        post: operations["workspace_workspace_uninvite_team_member_create"];
    };
    "/workspace/workspace/user-workspaces/": {
        /** @description Handle GET. */
        get: operations["workspace_workspace_user_workspaces_list"];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        /** @description Serialize anonymous user. */
        AnonymousUser: {
            kind: components["schemas"]["AnonymousUserKindEnum"];
        };
        /**
         * @description * `unauthenticated` - unauthenticated
         * @enum {string}
         */
        AnonymousUserKindEnum: "unauthenticated";
        /** @description Accept old and new password. */
        ChangePassword: {
            current_password: string;
            new_password: string;
        };
        /** @description ChatMessage model serializer. */
        ChatMessageBase: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            /** Format: uuid */
            uuid: string;
            text: string;
            author: components["schemas"]["TeamMemberBase"];
        };
        /** @description Take email and password. */
        ConfirmEmail: {
            /** Format: email */
            email: string;
            token: string;
        };
        /** @description Accept new email. */
        ConfirmEmailAddressUpdate: {
            confirmation_token: string;
        };
        /** @description Serializer that takes in a Coupon's code. */
        CouponRedeem: {
            code: string;
        };
        /** @description Serializer for customer. */
        Customer: {
            seats: number;
            /** Format: uuid */
            uuid: string;
            subscription_status: components["schemas"]["SubscriptionStatusEnum"];
        };
        /** @description Serialize 403 forbidden error. */
        Forbidden: {
            status: components["schemas"]["ForbiddenStatusEnum"];
            code: components["schemas"]["ForbiddenCodeEnum"];
        };
        /**
         * @description * `403` - 403
         * @enum {integer}
         */
        ForbiddenCodeEnum: 403;
        /**
         * @description * `permission_denied` - permission_denied
         * @enum {string}
         */
        ForbiddenStatusEnum: "permission_denied";
        /** @description Accept email. */
        InviteUserToWorkspace: {
            /** Format: email */
            email: string;
        };
        /** @description Label model serializer. */
        LabelBase: {
            name: string;
            /**
             * Format: int64
             * @description Color index
             */
            color: number;
            /** Format: uuid */
            uuid: string;
        };
        /** @description Serializer for label creation. */
        LabelCreate: {
            name: string;
            /**
             * Format: int64
             * @description Color index
             */
            color: number;
            /** Format: uuid */
            workspace_uuid: string;
        };
        /** @description Serializer for Label update. */
        LabelUpdate: {
            name: string;
            /**
             * Format: int64
             * @description Color index
             */
            color: number;
        };
        /** @description Take email and password. */
        LogIn: {
            /** Format: email */
            email: string;
            password: string;
        };
        /** @description Serialize logged in user. */
        LoggedInUser: {
            /** Format: email */
            email: string;
            /** @default authenticated */
            kind: components["schemas"]["LoggedInUserKindEnum"];
            preferred_name: string | null;
            /** @description Return profile picture. */
            profile_picture: string | null;
        };
        /**
         * @description * `authenticated` - authenticated
         * @enum {string}
         */
        LoggedInUserKindEnum: "authenticated";
        /** @description Serialize 404 not found error. */
        NotFound: {
            status: components["schemas"]["NotFoundStatusEnum"];
            code: components["schemas"]["NotFoundCodeEnum"];
        };
        /**
         * @description * `404` - 404
         * @enum {integer}
         */
        NotFoundCodeEnum: 404;
        /**
         * @description * `not_found` - not_found
         * @enum {string}
         */
        NotFoundStatusEnum: "not_found";
        /** @description Serialize password policies. */
        PasswordPolicies: {
            policies: string[];
        };
        /** @description Take email, token and a new password. */
        PasswordResetConfirm: {
            /** Format: email */
            email: string;
            token: string;
            new_password: string;
        };
        /** @description Take an email address. */
        PasswordResetRequest: {
            /** Format: email */
            email: string;
        };
        /** @description Deserialize picture upload. */
        ProfilePictureUpload: {
            /** Format: uri */
            file?: string;
        };
        /** @description Accept the desired archival status. */
        ProjectArchive: {
            archived: boolean;
        };
        /** @description Project base serializer. */
        ProjectBase: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            title: string;
            description: string | null;
            /**
             * Format: date-time
             * @description Due date for this workspace board
             */
            due_date: string | null;
            /** Format: uuid */
            uuid: string;
            /**
             * Format: date-time
             * @description Archival timestamp of this workspace board.
             */
            archived: string | null;
        };
        /** @description Parse project creation input. */
        ProjectCreate: {
            title: string;
            description?: string | null;
            /** Format: uuid */
            workspace_uuid: string;
            /**
             * Format: date-time
             * @description Due date for this workspace board
             */
            due_date?: string | null;
        };
        /**
         * @description Project serializer.
         *
         * Serializes in both directions, workspace and sections, including their
         * tasks.
         */
        ProjectDetail: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            title: string;
            description: string | null;
            /**
             * Format: date-time
             * @description Due date for this workspace board
             */
            due_date: string | null;
            /** Format: uuid */
            uuid: string;
            /**
             * Format: date-time
             * @description Archival timestamp of this workspace board.
             */
            archived: string | null;
            sections: readonly components["schemas"]["ProjectDetailSection"][];
            workspace: components["schemas"]["WorkspaceBase"];
        };
        /** @description Reduced section serializer. */
        ProjectDetailSection: {
            /** Format: uuid */
            uuid: string;
            /** order */
            _order: number;
            title: string;
            tasks: readonly components["schemas"]["ProjectDetailTask"][];
            description: string | null;
        };
        /** @description Serialize all task details. */
        ProjectDetailTask: {
            title: string;
            /** Format: uuid */
            uuid: string;
            /**
             * Format: date-time
             * @description Due date for this task
             */
            due_date: string | null;
            number: number;
            labels: readonly components["schemas"]["LabelBase"][];
            assignee: components["schemas"]["TeamMemberBase"] | null;
            sub_tasks: readonly components["schemas"]["SubTaskBase"][];
            description: string | null;
        };
        /**
         * @description Serialize project and workspace containing it.
         *
         * Used when serializing up from a task or ws board section.
         */
        ProjectUp: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            title: string;
            description: string | null;
            /**
             * Format: date-time
             * @description Due date for this workspace board
             */
            due_date: string | null;
            /** Format: uuid */
            uuid: string;
            /**
             * Format: date-time
             * @description Archival timestamp of this workspace board.
             */
            archived: string | null;
            workspace: components["schemas"]["WorkspaceBase"];
        };
        /** @description Serializer for PUT. */
        ProjectUpdate: {
            title: string;
            description?: string | null;
            /**
             * Format: date-time
             * @description Due date for this workspace board
             */
            due_date?: string | null;
        };
        /** @description Accept new email. */
        RequestEmailAddressUpdate: {
            password: string;
            /** Format: email */
            new_email: string;
        };
        /**
         * @description * `OBSERVER` - Observer
         * * `CONTRIBUTOR` - Contributor
         * * `MAINTAINER` - Maintainer
         * * `OWNER` - Owner
         * @enum {string}
         */
        RoleEnum: "OBSERVER" | "CONTRIBUTOR" | "MAINTAINER" | "OWNER";
        /** @description Parse section creation input. */
        SectionCreate: {
            title: string;
            description?: string | null;
            /** Format: uuid */
            project_uuid: string;
        };
        /**
         * @description Section detail serializer.
         *
         * Goes both up (to workspace) and down (all tasks).
         */
        SectionDetail: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            title: string;
            description: string | null;
            /** order */
            _order: number;
            /** Format: uuid */
            uuid: string;
            project: components["schemas"]["ProjectUp"];
            tasks: readonly components["schemas"]["TaskWithSubTask"][];
        };
        /** @description Accept the desired position within project. */
        SectionMove: {
            order: number;
        };
        /** @description Serialize section up the hierarchy. */
        SectionUp: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            title: string;
            description: string | null;
            /** order */
            _order: number;
            /** Format: uuid */
            uuid: string;
            project: components["schemas"]["ProjectUp"];
        };
        /** @description Input serializer for PUT. */
        SectionUpdate: {
            title: string;
            description?: string | null;
        };
        /** @description Take in email and password. */
        SignUp: {
            /** Format: email */
            email: string;
            password: string;
            tos_agreed: boolean;
            privacy_policy_agreed: boolean;
        };
        /** @description Serializer a single Quota dataclass. */
        SingleQuota: {
            current: number | null;
            limit: number | null;
            can_create_more: boolean;
        };
        /** @description SubTask model serializer. */
        SubTaskBase: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            title: string;
            description: string | null;
            /** Format: uuid */
            uuid: string;
            /** @description Designate whether this sub task is done */
            done: boolean;
            /** order */
            _order: number;
        };
        /** @description A sub task serializer that accepts a missing UUID. */
        SubTaskCreateUpdate: {
            /** Format: uuid */
            uuid?: string;
            title: string;
            description?: string | null;
            /** @description Designate whether this sub task is done */
            done?: boolean;
        };
        /**
         * @description * `ACTIVE` - Active
         * * `UNPAID` - Unpaid
         * * `CANCELLED` - Cancelled
         * * `CUSTOM` - Custom subscription
         * @enum {string}
         */
        SubscriptionStatusEnum: "ACTIVE" | "UNPAID" | "CANCELLED" | "CUSTOM";
        /** @description Serializer for creating tasks. */
        TaskCreate: {
            title: string;
            description: string | null;
            assignee: components["schemas"]["UuidObject"] | null;
            labels: components["schemas"]["UuidObject"][];
            /**
             * Format: date-time
             * @description Due date for this task
             */
            due_date: string | null;
            sub_tasks?: components["schemas"]["SubTaskCreateUpdate"][];
            section: components["schemas"]["UuidObject"];
        };
        /**
         * @description Serialize all task details.
         *
         * Serializes up to the workspace in one direction, and all chat messages,
         * labels and sub task in the other direction.
         */
        TaskDetail: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            title: string;
            description: string | null;
            /** order */
            _order: number;
            /** Format: uuid */
            uuid: string;
            /**
             * Format: date-time
             * @description Due date for this task
             */
            due_date: string | null;
            number: number;
            sub_tasks: readonly components["schemas"]["SubTaskBase"][];
            labels: readonly components["schemas"]["LabelBase"][];
            assignee: components["schemas"]["TeamMemberBase"] | null;
            chat_messages: readonly components["schemas"]["ChatMessageBase"][];
            section: components["schemas"]["SectionUp"];
        };
        /** @description Accept a task uuid after which this task should be moved. */
        TaskMoveAfterTask: {
            /** Format: uuid */
            task_uuid: string;
        };
        /** @description Accept the target section uuid. */
        TaskMoveToSection: {
            /** Format: uuid */
            section_uuid: string;
        };
        /** @description Serializer for updating tasks. */
        TaskUpdate: {
            title: string;
            description: string | null;
            assignee: components["schemas"]["UuidObject"] | null;
            labels: components["schemas"]["UuidObject"][];
            /**
             * Format: date-time
             * @description Due date for this task
             */
            due_date: string | null;
            sub_tasks?: components["schemas"]["SubTaskCreateUpdate"][];
        };
        /** @description Serialize all task details. */
        TaskWithSubTask: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            title: string;
            description: string | null;
            /** order */
            _order: number;
            /** Format: uuid */
            uuid: string;
            /**
             * Format: date-time
             * @description Due date for this task
             */
            due_date: string | null;
            number: number;
            sub_tasks: readonly components["schemas"]["SubTaskBase"][];
            labels: readonly components["schemas"]["LabelBase"][];
            assignee: components["schemas"]["TeamMemberBase"] | null;
        };
        /** @description Team member serializer. */
        TeamMemberBase: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            user: components["schemas"]["User"];
            /** Format: uuid */
            uuid: string;
            role: components["schemas"]["RoleEnum"];
            job_title: string | null;
        };
        /** @description Serializer team member invites. */
        TeamMemberInvite: {
            /** Format: email */
            email: string;
            /** Format: date-time */
            created: string;
        };
        /** @description Serializer for PUT updates. */
        TeamMemberUpdate: {
            job_title?: string | null;
            role?: components["schemas"]["RoleEnum"];
        };
        /** @description Serialize 429 too many requests error. */
        TooManyRequests: {
            status: components["schemas"]["TooManyRequestsStatusEnum"];
            code: components["schemas"]["TooManyRequestsCodeEnum"];
        };
        /**
         * @description * `429` - 429
         * @enum {integer}
         */
        TooManyRequestsCodeEnum: 429;
        /**
         * @description * `throttled` - throttled
         * @enum {string}
         */
        TooManyRequestsStatusEnum: "throttled";
        /** @description Accept email. */
        UninviteUserFromWorkspace: {
            /** Format: email */
            email: string;
        };
        /** @description User serializer. */
        User: {
            /** Format: email */
            email: string;
            preferred_name: string | null;
            /** @description Return profile picture. */
            profile_picture: string | null;
        };
        /** @description Take only preferred_name in. */
        UserUpdate: {
            preferred_name?: string | null;
        };
        /** @description Deserialize the UUID for a any object with a UUID. */
        UuidObject: {
            /** Format: uuid */
            uuid: string;
        };
        /** @description Workspace base serializer. */
        WorkspaceBase: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            title: string;
            description: string | null;
            /** Format: uuid */
            uuid: string;
            /** @description Return profile picture. */
            picture: string | null;
        };
        /** @description Return the url to a billing portal session. */
        WorkspaceBillingPortalSessionCreateOutput: {
            /** Format: uri */
            url: string;
        };
        /** @description Accept a number of seats to be added into checkout. */
        WorkspaceCheckoutSessionCreateInput: {
            seats: number;
        };
        /** @description Return the url to a checkout session. */
        WorkspaceCheckoutSessionCreateOutput: {
            /** Format: uri */
            url: string;
        };
        /** @description Accept title, description. */
        WorkspaceCreate: {
            title: string;
            description?: string | null;
        };
        /**
         * @description Workspace detail serializer.
         *
         * Serializers ws board as well, but not the sections and so forth that they
         * contain.
         */
        WorkspaceDetail: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
            title: string;
            description: string | null;
            /** Format: uuid */
            uuid: string;
            /** @description Return profile picture. */
            picture: string | null;
            team_members: readonly components["schemas"]["TeamMemberBase"][];
            team_member_invites: readonly components["schemas"]["TeamMemberInvite"][];
            projects: readonly components["schemas"]["ProjectBase"][];
            labels: readonly components["schemas"]["LabelBase"][];
            quota: components["schemas"]["WorkspaceQuota"];
        };
        /** @description Deserialize an image attachment. */
        WorkspacePictureUpload: {
            /** Format: uri */
            file?: string;
        };
        /** @description Serializer quota. */
        WorkspaceQuota: {
            workspace_status: components["schemas"]["WorkspaceStatusEnum"];
            chat_messages: components["schemas"]["SingleQuota"];
            labels: components["schemas"]["SingleQuota"];
            sub_tasks: components["schemas"]["SingleQuota"];
            tasks: components["schemas"]["SingleQuota"];
            task_labels: components["schemas"]["SingleQuota"];
            projects: components["schemas"]["SingleQuota"];
            sections: components["schemas"]["SingleQuota"];
            team_members_and_invites: components["schemas"]["SingleQuota"];
        };
        /**
         * @description * `full` - full
         * * `trial` - trial
         * * `inactive` - inactive
         * @enum {string}
         */
        WorkspaceStatusEnum: "full" | "trial" | "inactive";
        /** @description Accept title, description. */
        WorkspaceUpdate: {
            title: string;
            description?: string | null;
        };
        auth_info:
            | components["schemas"]["LoggedInUser"]
            | components["schemas"]["AnonymousUser"];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
    /** @description Construct event type using data coming from stripe. */
    corporate_stripe_webhook_create: {
        responses: {
            /** @description No response body */
            200: {
                content: never;
            };
            /** @description No response body */
            400: {
                content: never;
            };
            /** @description No response body */
            500: {
                content: never;
            };
        };
    };
    /** @description Handle POST. */
    corporate_workspace_create_billing_portal_session_create: {
        parameters: {
            path: {
                workspace_uuid: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["WorkspaceBillingPortalSessionCreateOutput"];
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle POST. */
    corporate_workspace_create_checkout_session_create: {
        parameters: {
            path: {
                workspace_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceCheckoutSessionCreateInput"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkspaceCheckoutSessionCreateInput"];
                "multipart/form-data": components["schemas"]["WorkspaceCheckoutSessionCreateInput"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["WorkspaceCheckoutSessionCreateOutput"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for WorkspaceCheckoutSessionCreateInputSerializer */
                        details: {
                            seats?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle GET. */
    corporate_workspace_customer_retrieve: {
        parameters: {
            path: {
                workspace_uuid: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle POST. */
    corporate_workspace_redeem_coupon_create: {
        parameters: {
            path: {
                workspace_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CouponRedeem"];
                "application/x-www-form-urlencoded": components["schemas"]["CouponRedeem"];
                "multipart/form-data": components["schemas"]["CouponRedeem"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for CouponRedeemSerializer */
                        details: {
                            code?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle POST. */
    user_user_change_password_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePassword"];
                "application/x-www-form-urlencoded": components["schemas"]["ChangePassword"];
                "multipart/form-data": components["schemas"]["ChangePassword"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for ChangePasswordSerializer */
                        details: {
                            current_password?: string;
                            new_password?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            429: {
                content: {
                    "application/json": components["schemas"]["TooManyRequests"];
                };
            };
        };
    };
    /** @description Handle POST. */
    user_user_confirm_email_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmEmail"];
                "application/x-www-form-urlencoded": components["schemas"]["ConfirmEmail"];
                "multipart/form-data": components["schemas"]["ConfirmEmail"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for ConfirmEmailSerializer */
                        details: {
                            email?: string;
                            token?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
        };
    };
    /** @description Handle POST. */
    user_user_confirm_password_reset_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetConfirm"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirm"];
                "multipart/form-data": components["schemas"]["PasswordResetConfirm"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for PasswordResetConfirmSerializer */
                        details: {
                            email?: string;
                            token?: string;
                            new_password?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
        };
    };
    /** @description Handle GET. */
    user_user_current_user_retrieve: {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["auth_info"];
                };
            };
        };
    };
    /** @description Update a user. */
    user_user_current_user_update: {
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["UserUpdate"];
                "multipart/form-data": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["LoggedInUser"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for UserUpdateSerializer */
                        details: {
                            preferred_name?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
        };
    };
    /** @description Handle POST. */
    user_user_email_address_update_confirm_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmEmailAddressUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["ConfirmEmailAddressUpdate"];
                "multipart/form-data": components["schemas"]["ConfirmEmailAddressUpdate"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for ConfirmEmailAddressUpdateSerializer */
                        details: {
                            confirmation_token?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
        };
    };
    /** @description Handle POST. */
    user_user_email_address_update_request_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestEmailAddressUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["RequestEmailAddressUpdate"];
                "multipart/form-data": components["schemas"]["RequestEmailAddressUpdate"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for RequestEmailAddressUpdateSerializer */
                        details: {
                            password?: string;
                            new_email?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            429: {
                content: {
                    "application/json": components["schemas"]["TooManyRequests"];
                };
            };
        };
    };
    /** @description Handle POST. */
    user_user_log_in_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogIn"];
                "application/x-www-form-urlencoded": components["schemas"]["LogIn"];
                "multipart/form-data": components["schemas"]["LogIn"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["LoggedInUser"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for LogInSerializer */
                        details: {
                            email?: string;
                            password?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            429: {
                content: {
                    "application/json": components["schemas"]["TooManyRequests"];
                };
            };
        };
    };
    /** @description Handle POST. */
    user_user_log_out_create: {
        responses: {
            204: {
                content: {
                    "application/json": components["schemas"]["AnonymousUser"];
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
        };
    };
    /** @description Return all information about current password policy. */
    user_user_password_policy_retrieve: {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PasswordPolicies"];
                };
            };
        };
    };
    /** @description Handle POST. */
    user_user_profile_picture_upload_create: {
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["ProfilePictureUpload"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for ProfilePictureUploadSerializer */
                        details: {
                            file?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
        };
    };
    /** @description Handle POST. */
    user_user_request_password_reset_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordResetRequest"];
                "multipart/form-data": components["schemas"]["PasswordResetRequest"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for PasswordResetRequestSerializer */
                        details: {
                            email?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            429: {
                content: {
                    "application/json": components["schemas"]["TooManyRequests"];
                };
            };
        };
    };
    /** @description Handle POST. */
    user_user_sign_up_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUp"];
                "application/x-www-form-urlencoded": components["schemas"]["SignUp"];
                "multipart/form-data": components["schemas"]["SignUp"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for SignUpSerializer */
                        details: {
                            email?: string;
                            password?: string;
                            tos_agreed?: string;
                            privacy_policy_agreed?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            429: {
                content: {
                    "application/json": components["schemas"]["TooManyRequests"];
                };
            };
        };
    };
    /** @description Create the label. */
    workspace_label_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["LabelCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["LabelCreate"];
                "multipart/form-data": components["schemas"]["LabelCreate"];
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["LabelBase"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for LabelCreateSerializer */
                        details: {
                            name?: string;
                            color?: string;
                            workspace_uuid?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
        };
    };
    /** @description Handle PUT. */
    workspace_label_update: {
        parameters: {
            path: {
                label_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LabelUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["LabelUpdate"];
                "multipart/form-data": components["schemas"]["LabelUpdate"];
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["LabelBase"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for LabelUpdateSerializer */
                        details: {
                            name?: string;
                            color?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle DELETE. */
    workspace_label_destroy: {
        parameters: {
            path: {
                label_uuid: string;
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Create a project. */
    workspace_project_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["ProjectCreate"];
                "multipart/form-data": components["schemas"]["ProjectCreate"];
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["ProjectDetail"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for ProjectCreateSerializer */
                        details: {
                            title?: string;
                            description?: string;
                            workspace_uuid?: string;
                            due_date?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
        };
    };
    /** @description Handle GET. */
    workspace_project_retrieve: {
        parameters: {
            path: {
                project_uuid: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["ProjectDetail"];
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle PUT. */
    workspace_project_update: {
        parameters: {
            path: {
                project_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["ProjectUpdate"];
                "multipart/form-data": components["schemas"]["ProjectUpdate"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["ProjectUpdate"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for ProjectUpdateSerializer */
                        details: {
                            title?: string;
                            description?: string;
                            due_date?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle DELETE. */
    workspace_project_destroy: {
        parameters: {
            path: {
                project_uuid: string;
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Process request. */
    workspace_project_archive_create: {
        parameters: {
            path: {
                project_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectArchive"];
                "application/x-www-form-urlencoded": components["schemas"]["ProjectArchive"];
                "multipart/form-data": components["schemas"]["ProjectArchive"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for ProjectArchiveSerializer */
                        details: {
                            archived?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Create a section. */
    workspace_section_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["SectionCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["SectionCreate"];
                "multipart/form-data": components["schemas"]["SectionCreate"];
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["SectionDetail"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for SectionCreateSerializer */
                        details: {
                            title?: string;
                            description?: string;
                            project_uuid?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
        };
    };
    /** @description Handle GET. */
    workspace_section_retrieve: {
        parameters: {
            path: {
                section_uuid: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["SectionDetail"];
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Update section. */
    workspace_section_update: {
        parameters: {
            path: {
                section_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SectionUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["SectionUpdate"];
                "multipart/form-data": components["schemas"]["SectionUpdate"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["SectionUpdate"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for SectionUpdateSerializer */
                        details: {
                            title?: string;
                            description?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle DELETE. */
    workspace_section_destroy: {
        parameters: {
            path: {
                section_uuid: string;
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Process request. */
    workspace_section_move_create: {
        parameters: {
            path: {
                section_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SectionMove"];
                "application/x-www-form-urlencoded": components["schemas"]["SectionMove"];
                "multipart/form-data": components["schemas"]["SectionMove"];
            };
        };
        responses: {
            /** @description No response body */
            200: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for SectionMoveSerializer */
                        details: {
                            order?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description No response body */
            404: {
                content: never;
            };
        };
    };
    /** @description Handle POST. */
    workspace_task_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskCreate"];
                "multipart/form-data": components["schemas"]["TaskCreate"];
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["TaskDetail"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for TaskCreateSerializer */
                        details: {
                            title?: string;
                            description?: string;
                            /** @description Errors for UuidObjectSerializer */
                            assignee?: {
                                uuid?: string;
                            };
                            labels?: {
                                uuid?: string;
                            }[];
                            due_date?: string;
                            sub_tasks?: {
                                uuid?: string;
                                title?: string;
                                description?: string;
                                done?: string;
                            }[];
                            /** @description Errors for UuidObjectSerializer */
                            section?: {
                                uuid?: string;
                            };
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
        };
    };
    /** @description Handle GET. */
    workspace_task_retrieve: {
        parameters: {
            path: {
                task_uuid: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["TaskDetail"];
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /**
     * @description Override update behavior. Return using different serializer.
     *
     * The idea is that we accept abbreviated nested fields, but return
     * the data whole. (ws board section, sub tasks, labels, etc.)
     */
    workspace_task_update: {
        parameters: {
            path: {
                task_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskUpdate"];
                "multipart/form-data": components["schemas"]["TaskUpdate"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["TaskDetail"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for TaskUpdateSerializer */
                        details: {
                            title?: string;
                            description?: string;
                            /** @description Errors for UuidObjectSerializer */
                            assignee?: {
                                uuid?: string;
                            };
                            labels?: {
                                uuid?: string;
                            }[];
                            due_date?: string;
                            sub_tasks?: {
                                uuid?: string;
                                title?: string;
                                description?: string;
                                done?: string;
                            }[];
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Delete task. */
    workspace_task_destroy: {
        parameters: {
            path: {
                task_uuid: string;
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Process the request. */
    workspace_task_move_after_task_create: {
        parameters: {
            path: {
                task_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskMoveAfterTask"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskMoveAfterTask"];
                "multipart/form-data": components["schemas"]["TaskMoveAfterTask"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["TaskDetail"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for TaskMoveAfterTaskSerializer */
                        details: {
                            task_uuid?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Process the request. */
    workspace_task_move_to_section_create: {
        parameters: {
            path: {
                task_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskMoveToSection"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskMoveToSection"];
                "multipart/form-data": components["schemas"]["TaskMoveToSection"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["TaskDetail"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for TaskMoveToSectionSerializer */
                        details: {
                            section_uuid?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle GET. */
    workspace_team_member_retrieve: {
        parameters: {
            path: {
                team_member_uuid: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["TeamMemberBase"];
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle PUT. */
    workspace_team_member_update: {
        parameters: {
            path: {
                team_member_uuid: string;
            };
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TeamMemberUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["TeamMemberUpdate"];
                "multipart/form-data": components["schemas"]["TeamMemberUpdate"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["TeamMemberUpdate"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for TeamMemberUpdateSerializer */
                        details: {
                            job_title?: string;
                            role?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle DELETE. */
    workspace_team_member_destroy: {
        parameters: {
            path: {
                team_member_uuid: string;
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Create the workspace and add this user. */
    workspace_workspace_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkspaceCreate"];
                "multipart/form-data": components["schemas"]["WorkspaceCreate"];
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["WorkspaceBase"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for WorkspaceCreateSerializer */
                        details: {
                            title?: string;
                            description?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
        };
    };
    /** @description Handle GET. */
    workspace_workspace_retrieve: {
        parameters: {
            path: {
                workspace_uuid: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["WorkspaceDetail"];
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description No response body */
            404: {
                content: never;
            };
        };
    };
    /** @description Handle PUT. */
    workspace_workspace_update: {
        parameters: {
            path: {
                workspace_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkspaceUpdate"];
                "multipart/form-data": components["schemas"]["WorkspaceUpdate"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["WorkspaceUpdate"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for WorkspaceUpdateSerializer */
                        details: {
                            title?: string;
                            description?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Get queryset. */
    workspace_workspace_archived_projects_list: {
        parameters: {
            path: {
                workspace_uuid: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["ProjectBase"][];
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle POST. */
    workspace_workspace_invite_team_member_create: {
        parameters: {
            path: {
                workspace_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InviteUserToWorkspace"];
                "application/x-www-form-urlencoded": components["schemas"]["InviteUserToWorkspace"];
                "multipart/form-data": components["schemas"]["InviteUserToWorkspace"];
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["InviteUserToWorkspace"];
                };
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for InviteUserToWorkspaceSerializer */
                        details: {
                            email?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle POST. */
    workspace_workspace_picture_upload_create: {
        parameters: {
            path: {
                workspace_uuid: string;
            };
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["WorkspacePictureUpload"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for WorkspacePictureUploadSerializer */
                        details: {
                            file?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            404: {
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    /** @description Handle POST. */
    workspace_workspace_uninvite_team_member_create: {
        parameters: {
            path: {
                workspace_uuid: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UninviteUserFromWorkspace"];
                "application/x-www-form-urlencoded": components["schemas"]["UninviteUserFromWorkspace"];
                "multipart/form-data": components["schemas"]["UninviteUserFromWorkspace"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        code: 400;
                        /** @description Errors for UninviteUserFromWorkspaceSerializer */
                        details: {
                            email?: string;
                        };
                        general: string[];
                        /** @enum {string} */
                        status: "invalid";
                    };
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description No response body */
            404: {
                content: never;
            };
        };
    };
    /** @description Handle GET. */
    workspace_workspace_user_workspaces_list: {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["WorkspaceBase"][];
                };
            };
            403: {
                content: {
                    "application/json": components["schemas"]["Forbidden"];
                };
            };
        };
    };
}
